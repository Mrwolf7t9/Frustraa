import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:record/record.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';

class ChatScreen extends StatefulWidget {
  final String groupName;
  ChatScreen({required this.groupName});

  @override
  State<ChatScreen> createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final TextEditingController messageController = TextEditingController();
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final Record _record = Record();
  bool isRecording = false;
  String userName = 'Anonymous';

  void sendMessage() {
    if (messageController.text.isNotEmpty) {
      _firestore.collection('groups').doc(widget.groupName).collection('messages').add({
        'sender': userName,
        'text': messageController.text,
        'timestamp': FieldValue.serverTimestamp(),
      });
      messageController.clear();
    }
  }

  Future<String> startRecording() async {
    if (await _record.hasPermission()) {
      final dir = await getTemporaryDirectory();
      final filePath = '${dir.path}/${DateTime.now().millisecondsSinceEpoch}.m4a';
      await _record.start(path: filePath, encoder: AudioEncoder.aacLc);
      setState(() => isRecording = true);
      return filePath;
    }
    return '';
  }

  Future<String?> stopRecording(String filePath) async {
    await _record.stop();
    setState(() => isRecording = false);
    File file = File(filePath);
    if (!file.existsSync()) return null;
    final ref = FirebaseStorage.instance.ref().child('voice_messages/${DateTime.now().millisecondsSinceEpoch}.m4a');
    await ref.putFile(file);
    String url = await ref.getDownloadURL();
    return url;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.groupName), backgroundColor: Colors.black),
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder<QuerySnapshot>(
              stream: _firestore.collection('groups').doc(widget.groupName).collection('messages').orderBy('timestamp', descending: true).snapshots(),
              builder: (context, snapshot) {
                if (!snapshot.hasData) return Center(child: CircularProgressIndicator());
                final docs = snapshot.data!.docs;
                return ListView.builder(
                  reverse: true,
                  itemCount: docs.length,
                  itemBuilder: (context, index) {
                    final data = docs[index];
                    if (data['voiceUrl'] != null) {
                      return ListTile(
                        leading: Icon(Icons.play_arrow, color: Colors.amber),
                        title: Text('${data['sender']} sent a voice message', style: TextStyle(color: Colors.black)),
                        onTap: () {
                          // Play audio using any audio player package
                        },
                      );
                    } else {
                      return Container(
                        alignment: Alignment.centerLeft,
                        padding: EdgeInsets.all(10),
                        child: Container(
                          decoration: BoxDecoration(color: Colors.amber[700], borderRadius: BorderRadius.circular(10)),
                          padding: EdgeInsets.all(10),
                          child: Text('${data['sender']}: ${data['text']}', style: TextStyle(color: Colors.black)),
                        ),
                      );
                    }
                  },
                );
              },
            ),
          ),
          Container(
            padding: EdgeInsets.all(8),
            color: Colors.grey[900],
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: messageController,
                    style: TextStyle(color: Colors.white),
                    decoration: InputDecoration(
                      hintText: 'Type a message...',
                      hintStyle: TextStyle(color: Colors.grey),
                      border: InputBorder.none,
                    ),
                  ),
                ),
                IconButton(
                  icon: Icon(isRecording ? Icons.stop : Icons.mic, color: Colors.amber),
                  onPressed: () async {
                    if (!isRecording) {
                      await startRecording();
                    } else {
                      final dir = await getTemporaryDirectory();
                      final path = '${dir.path}/${DateTime.now().millisecondsSinceEpoch}.m4a';
                      final url = await stopRecording(path);
                      if (url != null) {
                        _firestore.collection('groups').doc(widget.groupName).collection('messages').add({
                          'sender': userName,
                          'voiceUrl': url,
                          'timestamp': FieldValue.serverTimestamp(),
                        });
                      }
                    }
                  },
                ),
                IconButton(icon: Icon(Icons.send, color: Colors.amber), onPressed: sendMessage),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
